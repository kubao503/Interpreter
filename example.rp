int i = 3 + 2 * 4.8 as int;
float f = 2.3 / 2 as float;
bool b = not false or 1 == 1 and true != true;

print i;
print f;
print b;

const float pi = 3.14;

# ConstViolation
# pi = 3;

# String concatenation
str w = "Hello" + "\n" + "\"world\"";
print w;

i = 4;
while i > 0 {
    print i;
    if i == 3 {
        i = i - 1;
    }
    i = i - 1;
}
print i;

struct Point {
    int x,
    int y
}

Point p = {7, 2};

p.y = 1;
print p;

p.y = p.x;
print p;

int add_one(int num) {
    return num + 1;
}

void add_one_ref(ref int num) {
    num = num + 1;
}

i = 3;
int res = add_one(i);   # Pass by value
print res;

add_one_ref(ref i);     # Pass by reference
print i;

variant Any {
    int,
    str,
    Point
}

void foo(Any any) {
    if any is int {
        print "Any is int";
        int i = 2 * any as int;
        print i;
    }
    if any is Point {
        print "Any is Point";
        Point o = any as Point;
        print o;
    }
}

p = { 2, 5 };
Any a = p as Any;
foo(a);

a = 5 as Any;
foo(a);

struct None {}
None none = {};

variant OptionalFloat {
    float, None
}

OptionalFloat divide(int a, int b) {
    if b == 0 {
        return none;
    }
    return a as float / b as float;
}

void tryDivide(int a, int b) {
    OptionalFloat result = divide(a, b);
    if result is None {
        print "Dividing by zero!";
        return;
    }
    print "Division result:";
    print result;
}

tryDivide(5, 2);
tryDivide(5, 0);

void count_down_to_zero(int i) {
    print i;
    if i == 0 {
        return;
    }
    count_down_to_zero(i - 1);
}

count_down_to_zero(5);

int fibonacci_rec(int x) {
    if x <= 0 {
        return 0;
    }
    if x == 1 {
        return 1;
    }
    return fibonacci_rec(x - 1) + fibonacci_rec(x - 2);
}

print "Recursive Fibonacci:";
int x = 2;
while x < 14 {
    print fibonacci_rec(x);
    x = x + 1;
}

void fibonacci(int x) {
    if x <= 0 {
        return;
    }
    if x == 1 {
        return;
    }

    int first = 0;
    int second = 1;

    int counter = 2;
    while counter <= x + 1 {
        int new = first + second;
        print new;
        first = second;
        second = new;
        counter = counter + 1;
    }
}

print "Non-recursive Fibonacci:";
fibonacci(14);
